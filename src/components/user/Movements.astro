---
interface Props{
  length_movement: number;
}

const {length_movement} = Astro.props;
---

<section id="showMore" class="bg-black/50 fixed top-0 left-0 h-full w-full z-50 hidden">
  <article id="close" class="w-full cursor-pointer max-md:hidden"></article>
  <article id="content" class="bg-slate-800 shadow-lg shadow-gray-900 w-[45rem] max-[930px]:w-[60rem] max-md:w-full p-5 flex flex-col gap-4 animate-displace">
    <header  class="flex justify-between items-center p-4 border-b-2 border-blue-500 rounded-t-sm">
      <span id="close_movements" class="w-fit h-fit p-1 cursor-pointer hover:bg-slate-700 transition-all duration-150 ease-in rounded-[3px] hidden max-md:flex">
        <svg class="icon icon-tabler icons-tabler-outline icon-tabler-x h-8" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"  fill="none"  stroke="white"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round">
          <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
          <path d="M18 6l-12 12" />
          <path d="M6 6l12 12" />
        </svg>
      </span>
      <h1 class="text-2xl text-white max-[490px]:text-lg">Historial de Movimientos</h1>
    </header>

    <main id="contentMovements" class="flex flex-col gap-3 overflow-y-auto h-full">
      {
        length_movement === 0 ? (
          <div class="flex flex-col items-center justify-center gap-4">
            <h2 class="text-white text-lg">No se encontraron movimientos</h2>
          </div>
        ) : (
          <div id="movement_hidden" class="flex-col items-center justify-center gap-4 hidden">
            <h2 class="text-white text-lg">No se encontraron movimientos</h2>
          </div>
          <slot/> 
        )
      }  
    </main>
  </article>
</section>

<script>
    let showMovements = document.querySelector("#showMovements") as HTMLButtonElement;
    let close = document.getElementById("close") as HTMLElement;
    let close_movements = document.getElementById("close_movements") as HTMLElement;
    let movements = document.querySelector("#showMore") as HTMLElement;

    let more_list = document.querySelectorAll("#more") as NodeListOf<HTMLElement>;
    let info_list = document.querySelectorAll("#info") as NodeListOf<HTMLElement>;

    showMovements?.addEventListener("click", () => {
      movements.style.display = window.getComputedStyle(movements).display === "none" ? "flex" : "none";
    });

    close.addEventListener("click", closeMovements);
    close_movements.addEventListener("click", closeMovements);

    more_list.forEach((element, index_element) => {
        element.addEventListener("click", () => {
            info_list.forEach((info, index_info) => {
                if(index_element == index_info){
                    if (window.getComputedStyle(info).display == "none") {
                        info.style.display = "flex";
                    } else {
                        info.style.display = "none";
                    }
                }
            });
        });
    });

    function closeMovements(){
      if (window.getComputedStyle(movements).display == "flex") {
            movements.style.display = "none";
            info_list.forEach((item) => {
              if (window.getComputedStyle(item).display == "flex") {
                  item.style.display = "none";
              }
            });
        } else {
            movements.style.display = "flex";
        }
    }
</script>
