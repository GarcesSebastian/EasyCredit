---
import Layout from "../layouts/Layout.astro";
---


<Layout title="Sebxstt - Inicio">
    <canvas id="grafico"></canvas>
</Layout>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    function ordenarFechasAsc(fechas: any) {
        let fechasDate = fechas.map((fecha: any) => new Date(fecha));

        fechasDate.sort((a: any, b: any) => a - b);
        
        let fechasOrdenadas = fechasDate.map((fecha: any) => fecha.toISOString().slice(0, 10));
        
        return fechasOrdenadas;
    }

    let response_data_variables: Response;
    let response_data_user: Response;

    let data_variables: any;
    let data_user: any;

    let isContinue = true;
    let err: any;

    let movements: any = [];
    let eje_x: any = [];

    try{
        response_data_variables = await fetch(`http://localhost:4000/variables/res`);
        data_variables = await response_data_variables.json();

        response_data_user = await fetch(`http://localhost:4000/user/data?email_user=${data_variables.email}`);
        data_user = await response_data_user.json();

        console.log(data_user);

        data_user.user_movements_complete.forEach((item: any) => {
            eje_x.push(item.fecha_movement);
        });

        eje_x = ordenarFechasAsc(eje_x);

        function normalizarFecha(fecha: any) {
            const partes = fecha.split('-');
            const año = partes[0];
            const mes = partes[1].length === 1 ? '0' + partes[1] : partes[1];
            const dia = partes[2].length === 1 ? '0' + partes[2] : partes[2];
            return `${año}-${mes}-${dia}`;
        }

        data_user.user_movements_complete.forEach((item: any) => {
            const fechaMovimientoNormalizada = normalizarFecha(item.fecha_movement);
            for (let i = 0; i < eje_x.length; i++) {
                const fechaEjeXNormalizada = normalizarFecha(eje_x[i]);

                if (fechaMovimientoNormalizada === fechaEjeXNormalizada) {
                    if(item.state_movement == "negativo"){
                        movements[i] = parseInt(item.action_movement) * -1;
                    }else{
                        movements[i] = parseInt(item.action_movement);
                    }
                    break;
                }
            }
        });

        eje_x.push("");

    }catch(e){
        isContinue = !isContinue;
        console.log(e);
        err = e;
    }
    
    let ctx = document.getElementById('grafico') as HTMLCanvasElement;

    Chart.defaults.backgroundColor = '#9BD0F5'; // Color de fondo
    Chart.defaults.borderColor = '#36A2EB'; // El color de los border
    Chart.defaults.color = '#fafafa'; // Elegir el color de la grafica en general

    Chart.defaults.elements.point.pointStyle = 'rectRounded'; // Elegir el tipo de puntos, en este caso se escogio circulo
    Chart.defaults.elements.point.borderWidth = 5; // Aumentar el tamaño de los puntos, en este caso circulos
    Chart.defaults.elements.point.radius = 7; // Aumentar el tamaño de los puntos, en este caso circulos
    Chart.defaults.elements.point.hoverRadius = 20; // Aumentar el tamaño de los puntos, en este caso al hacer hover
    Chart.defaults.elements.point.hoverBorderWidth = 4; // Aumentar el tamaño de los puntos, en este caso al hacer hover

    Chart.defaults.elements.line.tension = 0.25; // Determina la tension de las lineas

    (async function() {

        let datasets = [
            {
                label: 'Movimientos',
                data: movements,
                animations: {
                    y: {
                    duration: 1500
                    }
                }
            }
        ];

        const data = { // Toda esta mierta decide la longitud y la cantidad de valores en el eje horizontal (X)
            labels: eje_x,
            datasets: datasets
        };

        const totalDuration = 500;
        const delayBetweenPoints = totalDuration / (data.datasets.length * 2);
        const previousY = (ctx: any) => ctx.index === 0 ? ctx.chart.scales.y.getPixelForValue(100) : ctx.chart.getDatasetMeta(ctx.datasetIndex).data[ctx.index - 1].getProps(['y'], true).y;
        const animation = {
        x: {
            type: 'number',
            easing: 'linear',
            duration: delayBetweenPoints,
            from: NaN, // the point is initially skipped
            delay(ctx: any) {
            if (ctx.type !== 'data' || ctx.xStarted) {
                return 0;
            }
            ctx.xStarted = true;
            return ctx.index * delayBetweenPoints;
            }
        },
        y: {
            type: 'number',
            easing: 'linear',
            duration: delayBetweenPoints,
            from: previousY,
            delay(ctx: any) {
            if (ctx.type !== 'data' || ctx.yStarted) {
                return 0;
            }
            ctx.yStarted = true;
            return ctx.index * delayBetweenPoints;
            }
        }
        };

        const options = {
            animation,
            interaction: {
                intersect: false
            },
            scales: {
                x: {
                    ticks: {

                    },
                    display: true,
                    title: {
                    display: true,
                    text: 'Month',
                    color: '#fafafa',
                    font: {
                        family: 'sans-serif',
                        size: 20,
                        weight: 'bold',
                        lineHeight: 1.2
                    },
                    padding: {top: 20, left: 0, right: 0, bottom: 0}
                    }
                },
                y: {
                    display: true,
                    title: {
                        display: true,
                        text: 'Value',
                        color: '#fafafa',
                        font: {
                            family: 'sans-serif',
                            size: 20,
                            weight: 'bold',
                            lineHeight: 1.2
                        },
                        padding: {
                            top: 30, 
                            left: 0, 
                            right: 0, 
                            bottom: 15
                        }
                    },
                    min: -10000000,
                    max: 10000000,
                }
            },
            plugins: {
                colors: {
                    forceOverride: true
                },
                layout: {
                    padding: 100
                },
                title: {
                    display: true,
                    text: 'Grafica de valores del prestamo',
                    padding: {
                        top: 30,
                        bottom: 10
                    },
                    font:{
                        size: 20,
                        family: 'sans-serif',
                        weight: 'bold',
                        lineHeight: 1.2
                    },
                },
                legend: {
                    labels: {
                        usePointStyle: true,
                        font: {
                            size: 14,
                            family: 'sans-serif',
                            weight: 'bold',
                            lineHeight: 1.2
                        },
                        color: '#fafafa',
                    },
                    
                }
            },
        };

        new Chart(ctx.getContext("2d") as any, {
            type: 'line',
            data: data,
            options: options,
            plugins: [],
        });

    })();
</script>
